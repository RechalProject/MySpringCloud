users:
  name: jack
  age: 21
  arrays: 1,2,3,4,5
  list1:
  - 上海
  - 北京
  list2:
  - name: job
    value: 东京
  - name: finsh
    value: 南京
  map1:
    key1: 西京
    key2: 上海
server:
  port: 8081
  servlet:
    context-path: /index
spring:
  rabbitmq:
    host: 192.168.112.21
    port: 5672
    username: guest
    password: guest
    publisher-confirms: true
    virtual-host: /
  redis:
    jedis:
      pool:
        min-idle: 5
        max-active: 10
        max-idle: 10
        max-wait: 2000ms #连接池等待时间
    host: 192.168.112.21
    port: 6379
    timeout: 1000ms #连接时间
  mvc:
    date-format: yyyy-MM-dd HH:mm:ss
  thymeleaf:
    cache: false
    prefix: classpath:/templates/
    suffix: .html
  http:
    encoding:
      charset: UTF-8
      force: true
  application:
    name: MyProgram
  datasource:
    url: jdbc:mysql://192.168.112.21:3306/wtf?useUnicode=true&characterEncoding=UTF-8&autoReconnect=true&useSSL=false
    username: root
    password: 158262751
    driver-class-name: com.mysql.cj.jdbc.Driver
    type: com.alibaba.druid.pool.DruidDataSource
    druid:
      max-active: 30                           #初始化连接池的连接数量 大小，最小，最大
      min-idle: 5
      initial-size: 10
      ## 配置获取连接等待超时的时间
      max-wait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      time-between-eviction-runs-millis: 60000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      min-evictable-idle-time-millis: 300000
      # 校验SQL，Oracle配置 spring.datasource.validationQuery=SELECT 1 FROM DUAL，如果不配validationQuery项，则下面三项配置无用
      validation-query: SELECT 'x'
      test-while-idle: true
      test-on-borrow: false
      test-on-return: false
      web-stat-filter:
        enabled: true
        url-pattern: /*
        exclusions: '*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*'
        session-stat-enable: true
        session-stat-max-count: 100000
        principal-session-name: admin
        principal-cookie-name: admin
        profile-enable: true

      #基础监控配置（主要是配置监控的身份验证信息，毕竟系统运行状态也是个小秘密）
      stat-view-servlet:
        enabled: true
        url-pattern: /druid/*
        #禁止手动重置监控数据
        reset-enable: true #false
        login-username: admin
        login-password: 123456
        allow:
      #        deny: 192.168.13.14
      filter:
        wall:
          enabled: true
          db-type: mysql
          config:
            alter-table-allow: false
            truncate-allow: false
            drop-table-allow: false
            none-base-statement-allow: false
            update-where-none-check: true
            metadata-allow: true
          log-violation: true
          throw-exception: true
      #Spring监控，对内部各接口调用的监控
      aop-patterns: com.graduation.design.mapper.*,com.graduation.design.controller.*,com.graduation.design.service.*
      # 是否缓存preparedStatement，也就是PSCache  官方建议MySQL下建议关闭   个人建议如果想用SQL防火墙 建议打开
      pool-prepared-statements: true
      max-pool-prepared-statement-per-connection-size: 20
      use-global-data-source-stat: true
      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
      connection-properties: 'druid.stat.mergeSql=true;druid.stat.slowSqlMillis: 500'
      # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙  配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
      # ！！！请勿配置timeBetweenLogStatsMillis 会定时输出日志 并导致统计的sql清零
      #      time-between-log-stats-millis: 20000
      filters: stat,wall
  #  mybatis配置，默认淘汰#
#  mybatis:
#    configuration:
#      map-underscore-to-camel-case: true
#    type-aliases-package: com.graduation.design.model
#    mapper-locations: classpath:com/graduation/design/mapper/*.xml
  # iphone 有plus版本，mybatis也有plus？？？ T0T?
  jackson:
    date-format: yyyy:MM:dd HH:mm:ss
mybatis-plus:
  #配置包扫描位置
  configuration:
    #适配驼峰命名法
    map-underscore-to-camel-case: true #默认为true
  type-aliases-package: com.graduation.design.model
  mapper-locations: classpath:com/graduation/design/mapper/*.xml
  #自定义类型转换
  #  type-handlers-package: com.web.pro.model.handler

  #开启注解班

#  cache:
#    type: redis
#    cache-names: redisCahe
logging:
  level:
    com.web.pro.mapper: debug
#    root: debug
#    org.org.mybatis: debug
#    org.springframework: debug