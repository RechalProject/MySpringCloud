server:
  port: 8082
spring:
  application:
    name: order
  #开启消息跟踪
  cloud:
    bus:
      refresh:
        enabled: true
    #开启配置中心配置
    config:
      discovery:
        enabled: true
        #获取配置中心注册的ID
        service-id: config
      #首先配置为Dev
      profile: yml
#      profile: com
    stream:
      bindings:
        # input 绑定通道 与接口中的通道相对应 解决多实例应用请求一个URL 造成所有的实例接收消息
        input:
          # 绑定交换器
          destination: rabbit-test
          content-type: application/json
          #分组:多实例下 不同的分组 相当于同一个应用的不同实例 通道 对应不同的队列
          group: myorder1
        #绑定输出通道名
        output:
          destination: rabbit-test
          conteny-type: aaplication/json
          group: myorder1

#  rabbitmq:
#    addresses: 192.168.43.181
#    username: guest
#    password: guest
#    host: 5672

eureka:
  client:
    service-url:
      defaultZone: http://peer1:8791/eureka/,http://peer2:8792/eureka/,http://peer3:8793/eureka/
hystrix:
  command:
    #默认匹配所有带有 @HystrixCommand 方法的注解
    default:
      execution:
       isolation:
         thread:
           #设置服务延时
          timeoutInMilliseconds: 1000
    #为方法单独设置一个超时时间
    getProductList:
      execution:
        isolation:
          thread:
            #设置服务延时
            timeoutInMilliseconds: 3000
 #Hystrix和Feign 服务端和客户端进行服务降级 hystrix定义在服务端
feign:
  hystrix:
    enabled: true
#Hystrix可視化监控 默认有上下文 http://localhost:8082/actuator/hystrix.stream
management:
  server:
    servlet:
      context-path: /
  endpoints:
    web:
      exposure:
        include: hystrix.stream
